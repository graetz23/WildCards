//
// WildCards is distributed under the MIT License (MIT); this file is part of.
//
// Copyright (c) 2018-2022 Christian (graetz23@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

namespace WildCards
{
    namespace Currency
    {
        using Microsoft.Win32.SafeHandles;
        using System.CodeDom;
        using System.Collections.Concurrent;
        using System.Collections.Generic;
        using WildCards.Exceptions;
        using Jetons = System.Collections.Generic.List<Jeton>;
        using JetonSet = System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<Jeton>>;
        using Register = System.Collections.Generic.Dictionary<string, Jeton>;

        /// <summary>
        /// A jeton of true plastic value.
        /// </summary>
        /// <remarks>
        /// Each created Jeton object has it's own unique universal identifer (UUID).
        /// Those Jeton objects will be genrated by a Bank object and will be registered.
        /// If a Jeton is spreaded by the Bank object, it is stored with the corresponding
        /// Player object and loaded again. Thou a Bank can verify, if a Jeton object was
        /// truely generated by fraud.
        /// </remarks>
        public class Jeton
        {
            /// <summary>
            /// The uniqueness of this jeton object.
            /// </summary>
            protected string _uuid = null;
            public string UUID { get { return _uuid; } private set { _uuid = value; } }

            /// <summary>
            /// The identifier (ID) of the jeton object.
            /// </summary>
            protected string _id = null;
            public string ID { get { return _id; } protected set { _id = value; } }

            /// <summary>
            /// The integer value of the jeton.
            /// </summary>
            /// <remarks>
            /// It's used for calculations on jeton worthness and on playing strategy.
            /// </remarks>
            protected int _value = 0;
            public int VALUE { get { return _value; } protected set { _value = value; } }

            /// <summary>
            /// A part of the unique XML tag of the object.
            /// </summary>
            protected string _xTag = "Jeton";
            public string XTag { get { return _xTag; } protected set { _xTag = value; } }

            public Jeton(string uuid)
            {
                UUID = uuid; // can be overwritten if loaded from file ..
            } // method

            protected void verify(string tag)
            { // jeton was loaded from file, check for manipulations
                if (tag != null)
                {
                    if (!Helper.compare(XTag, tag))
                    {
                        throw new NotValid($"{GetType()} - given XTag: {XTag} is not {tag}");
                    } // if
                    if (!Helper.compare(ID, Tags.shorten(tag)))
                    {
                        throw new NotValid($"{GetType()} - given ID: {ID} is not {Tags.shorten(tag)}");
                    } // if
                    if (VALUE != Tags.value(tag))
                    {
                        throw new NotValid($"{GetType()} - given VAL: {VALUE} is not {Tags.value(tag)}");
                    } // if
                } // if
            } // method

        } // class

        public class JetonOne : Jeton
        {
            public JetonOne() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.One);
                _value = Tags.value(Tags.One);
                _xTag = Tags.One;
            } // method

            public JetonOne(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.One);
            } // method

        } // class

        public class JetonFive : Jeton
        {
            public JetonFive() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.Five);
                _value = Tags.value(Tags.Five);
                _xTag = Tags.Five;
            } // method

            public JetonFive(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.Five);
            } // method

        } // class

        public class JetonTen : Jeton
        {
            public JetonTen() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.Ten);
                _value = Tags.value(Tags.Ten);
                _xTag = Tags.Ten;
            } // method

            public JetonTen(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.Ten);
            } // method

        } // class

        public class JetonFifty : Jeton
        {
            public JetonFifty() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.Fifty);
                _value = Tags.value(Tags.Fifty);
                _xTag = Tags.Fifty;
            } // method

            public JetonFifty(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.Fifty);
            } // method

        } // class

        public class JetonHundred : Jeton
        {
            public JetonHundred() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.Hundred);
                _value = Tags.value(Tags.Hundred);
                _xTag = Tags.Hundred;
            } // method

            public JetonHundred(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.Hundred);
            } // method

        } // class

        public class JetonThousand : Jeton
        {
            public JetonThousand() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.Thousand);
                _value = Tags.value(Tags.Thousand);
                _xTag = Tags.Thousand;
            } // method

            public JetonThousand(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.Thousand);
            } // method

        } // class

        public class JetonFraud : Jeton
        { // this is a fake jeton that is nothing worth ..
            public JetonFraud() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.Joker);
                _value = Tags.value(Tags.Joker);
                _xTag = Tags.Joker;
            } // method

            public JetonFraud(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VALUE = jeton.VALUE;
                XTag = jeton.XTag;
                verify(Tags.Joker);
            } // method

        } // class

        public class Set
        {
            private JetonSet _jetonSet = null;
            public JetonSet SET { get { return _jetonSet; } private set { _jetonSet = value; } }

            public Set()
            {
                SET = new JetonSet();
                SET.Add(Tags.One, new Jetons());
                SET.Add(Tags.Five, new Jetons());
                SET.Add(Tags.Ten, new Jetons());
                SET.Add(Tags.Fifty, new Jetons());
                SET.Add(Tags.Hundred, new Jetons());
                SET.Add(Tags.Thousand, new Jetons());
            } // class

            public void add(Jeton jeton)
            {
                if (jeton is JetonOne)
                {
                    SET[Tags.One].Add(jeton);
                }
                else if (jeton is JetonFive)
                {
                    SET[Tags.Five].Add(jeton);
                }
                else if (jeton is JetonTen)
                {
                    SET[Tags.Ten].Add(jeton);
                }
                else if (jeton is JetonFifty)
                {
                    SET[Tags.Fifty].Add(jeton);
                }
                else if (jeton is JetonHundred)
                {
                    SET[Tags.Hundred].Add(jeton);
                }
                else if (jeton is JetonThousand)
                {
                    SET[Tags.Thousand].Add(jeton);
                }
                else
                {
                    throw new NotValid($"{GetType()} - given Jeton is not valid: {jeton.GetType()}");
                } // if
            } // method

            public Jeton remove(string tag)
            {
                Jeton jeton = null;
                if (!SET.ContainsKey(tag))
                    throw new NotValid($"{GetType()} - given tag: {tag} is not valid");
                Jetons jetons = SET[tag];
                int pos = jetons.Count - 1;
                if (pos >= 0)
                {
                    jeton = jetons[pos];
                    jetons.RemoveAt(pos);
                } // if
                return jeton;
            } // method

            public long sumUp()
            {
                long sum = 0;
                foreach (Jetons jetons in SET.Values)
                {
                    foreach (Jeton jeton in jetons)
                    {
                        sum += jeton.VALUE;
                    } // loop
                } // loop
                return sum;
            } // method

        } // class


        /// <summary>
        /// Generates Jetons and keeps a registry of all generated Jeton objects.
        /// The bank does balance all exchanges from currency to Jeton objects and
        /// from Jeton objects to currency.
        /// </summary>
        /// <remarks>
        /// Acts like a combined memento pattern and factory pattern for Jeton obejcts.
        /// </remarks>
        public class Bank
        {
            // The balancing of this bank
            private long _weight = 0; // how rich we are
            private long _account = 0; // the earns we have
            private long _issued = 0; // the outstandings we request
            public long WEIGHT { get { return _weight; } } // method
            public long ACCOUNT { get { return _account; } } // method
            public long ISSUED { get { return -_issued; } } // method
            public long CURRENT { get { return WEIGHT - ISSUED; } } // method
            public long BALANCE { get { return ACCOUNT - ISSUED; } } // method
            public bool checkBalance { get { return BALANCE == 0; } }

            // the registery of this bank 
            private Register _register = null;
            protected Register REGISTER { get { return _register; } private set { _register = value; } }

            private Set _safe = null;
            protected Set SAFE { get { return _safe; } private set { _safe = value; } }

            public Bank(int noOfEach = 10000)
            {
                SAFE = new Set();
                REGISTER = new Register(); ;
                generate(SAFE, noOfEach);
            } // method

            private Jeton produce(string tag)
            {
                Jeton jeton = null;
                switch (tag)
                {
                    case Tags.cnst_One:
                        jeton = new JetonOne(); // fresh from the press a 1
                        break;
                    case Tags.cnst_Five:
                        jeton = new JetonFive(); // fresh from the press a 5
                        break;
                    case Tags.cnst_Ten:
                        jeton = new JetonTen(); // fresh from the press a 10
                        break;
                    case Tags.cnst_Fifty:
                        jeton = new JetonFifty(); // fresh from the press a 50
                        break;
                    case Tags.cnst_Hundred:
                        jeton = new JetonHundred(); // fresh from the press a 100
                        break;
                    case Tags.cnst_Thousand:
                        jeton = new JetonThousand(); // fresh from the press a 1000
                        break;
                    default:
                        throw new NotValid($"{GetType()} - given tag: {tag} is not valid for producing a Jeton object");
                } // switch
                if (!REGISTER.ContainsKey(jeton.UUID))
                    REGISTER.Add(jeton.UUID, jeton);
                else
                    throw new NotValid($"{GetType()} - current jeton doubled an UUID: {jeton.UUID}");
                _weight += jeton.VALUE; // add to the weight of this bank
                return jeton;
            } // method

            private void generate(Set safe, int sum)
            {
                foreach (string tag in SAFE.SET.Keys)
                {
                    Jetons jetons = SAFE.SET[tag];
                    for (int j = 0; j < sum; j++)
                    {
                        Jeton jeton = produce(tag);
                        jetons.Add(jeton);
                    } // loop
                } // loop
            } // method

            public bool hasIntegrity()
            {
                bool hasIntegrity = true;
                HashSet<string> uuids = new HashSet<string>();
                foreach (string tag in SAFE.SET.Keys)
                {
                    foreach (Jeton jeton in SAFE.SET[tag])
                    {
                        string uuid = jeton.UUID;
                        if (uuids.Contains(uuid))
                        {
                            hasIntegrity = false;
#if DEBUG                        
                            System.Console.WriteLine($"{GetType()} - found doubled UUID: {uuid}");
#endif               
                        }
                        else
                        {
                            uuids.Add(uuid);
                        } // if
                    } // loop
                } // loop
                return hasIntegrity;
            } // method

            public bool registered(Jeton jeton)
            {
                bool isRegistered = false;
                string uuid = jeton.UUID;
                if (REGISTER.ContainsKey(uuid))
                {
                    isRegistered = true;
                } // if
                return isRegistered;
            } // method

            public bool registered(Jetons jetons)
            {
                bool areRegistered = true;
                foreach (Jeton jeton in jetons)
                {
                    bool isRegsitered = registered(jeton);
                    if (!isRegsitered)
                    {
                        areRegistered = false;
                    } // if
                } // method
                return areRegistered;
            } // method

            public long sumUp() { return SAFE.sumUp(); }

            public Jetons change(int dollar)
            {
                Jetons jetons = new Jetons();
                // TODO implement the exchange of jetons by given amount of dollars
                Dictionary<string, int> change = Helper.explode(dollar);
                foreach (string tag in change.Keys)
                {
                    int noOfJetons = change[tag];
                    for (int i = 0; i < noOfJetons; i++)
                    {
                        Jeton jeton = SAFE.remove(tag); // hand out this object
                        _account += jeton.VALUE; // balancing
                        _issued -= jeton.VALUE; // balancing
                        jetons.Add(jeton); // unsorted
                    } // loop
                } // loop
                return jetons;
            } // method

            public int change(Jetons jetons)
            {
                int dollar = 0;
                foreach (Jeton jeton in jetons)
                {
                    string tag = jeton.XTag;
                    int value = jeton.VALUE;
                    _account -= value;
                    _issued += value;
                    dollar += value;
                    SAFE.add(jeton);
                } // loop
                jetons.Clear(); // clear the list
                return dollar;
            } // method

        } // class

    } // namespace
} // namespace
