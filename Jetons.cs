//
// WildCards is distributed under the MIT License (MIT); this file is part of.
//
// Copyright (c) 2018-2022 Christian (graetz23@gmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

namespace WildCards
{
    namespace Jetons
    {
        using System.Collections.Generic;
        using WildCards.Exceptions;

        /// <summary>
        /// A jeton of true plastic value.
        /// </summary>
        /// <remarks>
        /// Each created Jeton object has it's own unique universal identifer (UUID).
        /// Those Jeton objects will be genrated by a Bank object and will be registered.
        /// If a Jeton is spreaded by the Bank object, it is stored with the corresponding
        /// Player object and loaded again. Thou a Bank can verify, if a Jeton object was
        /// truely generated by fraud.
        /// </remarks>
        public class Jeton
        {
            /// <summary>
            /// The uniqueness of this jeton object.
            /// </summary>
            protected string _uuid = null;
            public string UUID { get { return _uuid; } private set { _uuid = value; } }

            /// <summary>
            /// The identifier (ID) of the jeton object.
            /// </summary>
            protected string _id = null;
            public string ID { get { return _id; } protected set { _id = value; } }

            /// <summary>
            /// The integer value of the jeton.
            /// </summary>
            /// <remarks>
            /// It used for calculations on worthness and playing strategy.
            /// </remarks>
            protected int _value = 0;
            public int VAL { get { return _value; } protected set { _value = value; } }

            /// <summary>
            /// A part of the unique XML tag of the object.
            /// </summary>
            protected string _xTag = "Jeton";
            public string XTag { get { return _xTag; } protected set { _xTag = value; } }

            public Jeton(string uuid)
            {
                UUID = uuid; // can be overwritten if loaded from file ..
            } // method

            protected void verify(string tag)
            { // jeton was loaded from file, check for manipulations
                if (tag != null)
                { 
                    if (!Helper.compare(XTag, tag))
                    {
                        throw new NotValid($"{GetType()} - given XTag: {XTag} is not {tag}");
                    } // if
                    if (!Helper.compare(ID, Tags.shorten(tag)))
                    {
                        throw new NotValid($"{GetType()} - given ID: {ID} is not {Tags.shorten(tag)}");
                    } // if
                    if (VAL != Tags.value(tag))
                    {
                        throw new NotValid($"{GetType()} - given VAL: {VAL} is not {Tags.value(tag)}");
                    } // if
                } // if
            } // method

        } // class

        public class JetonOne : Jeton
        {
            public JetonOne() : base(Helper.genUUID())
            {
                _id = Tags.shorten(Tags.One);
                _value = Tags.value(Tags.One);
                _xTag = Tags.One;
            } // method

            public JetonOne(Jeton jeton) : base(jeton.UUID)
            {
                ID = jeton.ID;
                VAL = jeton.VAL;
                XTag = jeton.XTag;
                verify(Tags.One);
            } // method

        } // class

        // TODO implement JetonFive, JetonTen, JetonFifty, JetonHundred, JetonThousand


        public class Staple
        {
            protected Dictionary<string, List<Jeton>> _jetons = null;

            public Staple()
            {
                _jetons = new Dictionary<string, List<Jeton>>();
                _jetons.Add(Tags.One, new List<Jeton>());
                _jetons.Add(Tags.Five, new List<Jeton>());
                _jetons.Add(Tags.Ten, new List<Jeton>());
                _jetons.Add(Tags.Fifty, new List<Jeton>());
                _jetons.Add(Tags.Hundred, new List<Jeton>());
                _jetons.Add(Tags.Thousand, new List<Jeton>());
            } // class

            public void add(Jeton jeton)
            {
                if(jeton is JetonOne)
                {
                    _jetons[Tags.One].Add(jeton);
                }
                //else if (jeton is JetonFive)
                //{
                //    _jetons[Tags.Five].Add(jeton);
                //}
                else
                {
                    throw new NotValid($"{GetType()} - given Jeton is not valid: {jeton.GetType()}");
                } // if
            } // method

            public int sumUp()
            {
                int sum = 0;
                foreach(List<Jeton> staple in _jetons.Values)
                {
                    foreach(Jeton jeton in staple)
                    {
                        sum += jeton.VAL;
                    } // loop
                } // loop
                return sum;
            } // method

        } // class


        /// <summary>
        /// Generates Jetons and keeps a digital copy of all generated Jeton objects.
        /// </summary>
        public class Bank
        {
            public Bank()
            {

            } // method
        
            
        
        } // class

    } // namespace
} // namespace
